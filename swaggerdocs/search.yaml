components:
  schemas:
    AggregationResponse:
      properties:
        count:
          format: int64
          type: integer
        key:
          type: string
      title: AggregationResponse
      type: object
    AppError:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        reason:
          type: string
      title: AppError
      type: object
    ByBoundingBox:
      properties:
        bottomRight:
          $ref: '#/components/schemas/Point'
          description: Bottom right corner of the bounding box.
        topLeft:
          $ref: '#/components/schemas/Point'
          description: Top left corner of the bounding box.
      title: ByBoundingBox
      type: object
    ByDistance:
      properties:
        distance:
          description: The radius of the circle centered on the specified location.
            Points which fall into this circle are considered to be matches.
          example: 1500
          exclusiveMaximum: false
          format: double
          maximum: 9223372036854775807
          type: number
        point:
          $ref: '#/components/schemas/Point'
          description: Center point of the query.
      title: ByDistance
      type: object
    ByGeoPolygon:
      properties:
        points:
          description: Polygon defined by a set of points.
          items:
            $ref: '#/components/schemas/Point'
          type: array
      title: ByGeoPolygon
      type: object
    ByIntersection:
      properties:
        polygons:
          description: List of polygons each defined by a set of points.
          items:
            $ref: '#/components/schemas/Polygon'
          type: array
      title: ByIntersection
      type: object
    ByWithinPolygon:
      properties:
        points:
          description: Polygon defined by a set of points.
          items:
            $ref: '#/components/schemas/Point'
          type: array
      title: ByWithinPolygon
      type: object
    CcsQueryRequest:
      properties:
        kind:
          description: '''kind'' to search'
          example: '"common:ihs:well:1.0.0" or "common:ihs:well:1.0.0,common:ihs:well:2.0.0"
            or ["common:ihs:well:1.0.0", "common:ihs:well:2.0.0"]'
          type: string
        limit:
          description: The maximum number of results to return from the given offset.
            If no limit is provided, then it will return 10 items. Max number of items
            which can be fetched by the query is 1000. (If you wish to fetch large
            set of items, please use query_with_cursor API)
          example: 30
          format: int32
          type: integer
        offset:
          description: The starting offset from which to return results.
          example: 0
          format: int32
          type: integer
        query:
          description: The query string in Lucene query string syntax.
          type: string
        queryAsOwner:
          description: The queryAsOwner switches between viewer and owner to return
            results that you are entitled to view or results you are the owner of.
          example: false
          type: boolean
      required:
      - kind
      title: CcsQueryRequest
      type: object
    CcsQueryResponse:
      properties:
        results:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        totalCount:
          format: int64
          type: integer
      title: CcsQueryResponse
      type: object
    ConnectedOuterService:
      properties:
        name:
          type: string
        version:
          type: string
      title: ConnectedOuterService
      type: object
    CursorQueryRequest:
      properties:
        cursor:
          description: Search context to retrieve next batch of results.
          type: string
        kind:
          description: '''kind'' to search'
          example: '"common:ihs:well:1.0.0" or "common:ihs:well:1.0.0,common:ihs:well:2.0.0"
            or ["common:ihs:well:1.0.0", "common:ihs:well:2.0.0"]'
          type: object
        limit:
          description: The maximum number of results to return from the given offset.
            If no limit is provided, then it will return 10 items. Max number of items
            which can be fetched by the query is 1000. (If you wish to fetch large
            set of items, please use query_with_cursor API)
          example: 30
          format: int32
          type: integer
        query:
          description: The query string in Lucene query string syntax.
          type: string
        queryAsOwner:
          description: The queryAsOwner switches between viewer and owner to return
            results that you are entitled to view or results you are the owner of.
          example: false
          type: boolean
        returnedFields:
          description: The fields on which to project the results.
          items:
            type: string
          type: array
        sort:
          $ref: '#/components/schemas/SortQuery'
          description: The fields and orders to return sorted results.
        spatialFilter:
          $ref: '#/components/schemas/SpatialFilter'
          description: A spatial filter to apply.
        trackTotalCount:
          description: Tracks accurate record count matching the query if 'true',
            partial count otherwise. Partial count queries are more performant. Default
            is 'false' and returns 10000 if matching records are higher than 10000.
          example: false
          type: boolean
      required:
      - kind
      title: CursorQueryRequest
      type: object
    CursorQueryResponse:
      properties:
        cursor:
          type: string
        results:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        totalCount:
          format: int64
          type: integer
      title: CursorQueryResponse
      type: object
    Point:
      properties:
        latitude:
          description: Latitude of point.
          example: 37.450727
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          maximum: 90
          minimum: -90
          type: number
        longitude:
          description: Longitude of point.
          example: -122.174762
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          maximum: 180
          minimum: -180
          type: number
      title: Point
      type: object
    Polygon:
      properties:
        points:
          description: List of points making up a polygon
          items:
            $ref: '#/components/schemas/Point'
          type: array
      title: Polygon
      type: object
    QueryRequest:
      properties:
        kind:
          description: '''kind'' to search'
          example: '"common:ihs:well:1.0.0" or "common:ihs:well:1.0.0,common:ihs:well:2.0.0"
            or ["common:ihs:well:1.0.0", "common:ihs:well:2.0.0"]'
          type: object
        limit:
          description: The maximum number of results to return from the given offset.
            If no limit is provided, then it will return 10 items. Max number of items
            which can be fetched by the query is 1000. (If you wish to fetch large
            set of items, please use query_with_cursor API)
          example: 30
          format: int32
          type: integer
        offset:
          description: The starting offset from which to return results.
          example: 0
          format: int32
          type: integer
        query:
          description: The query string in Lucene query string syntax.
          type: string
        queryAsOwner:
          description: The queryAsOwner switches between viewer and owner to return
            results that you are entitled to view or results you are the owner of.
          example: false
          type: boolean
        returnedFields:
          description: The fields on which to project the results.
          items:
            type: string
          type: array
        sort:
          $ref: '#/components/schemas/SortQuery'
          description: The fields and orders to return sorted results.
        spatialFilter:
          $ref: '#/components/schemas/SpatialFilter'
          description: A spatial filter to apply.
        trackTotalCount:
          description: Tracks accurate record count matching the query if 'true',
            partial count otherwise. Partial count queries are more performant. Default
            is 'false' and returns 10000 if matching records are higher than 10000.
          example: false
          type: boolean
      required:
      - kind
      title: QueryRequest
      type: object
    QueryResponse:
      properties:
        aggregations:
          items:
            $ref: '#/components/schemas/AggregationResponse'
          type: array
        results:
          items:
            additionalProperties:
              type: object
            type: object
          type: array
        totalCount:
          format: int64
          type: integer
      title: QueryResponse
      type: object
    SortQuery:
      properties:
        field:
          description: The list of fields to sort the results.
          items:
            type: string
          type: array
        order:
          description: The list of orders to sort the results. The element must be
            either ASC or DESC.
          type: object
      title: SortQuery
      type: object
    SpatialFilter:
      properties:
        byBoundingBox:
          $ref: '#/components/schemas/ByBoundingBox'
          description: A query allowing to filter hits based on a point location within
            a bounding box.
        byDistance:
          $ref: '#/components/schemas/ByDistance'
          description: Filters documents that include only hits that exist within
            a specific distance from a geo point.
        byGeoPolygon:
          $ref: '#/components/schemas/ByGeoPolygon'
          description: A query allowing to filter hits that only fall within a polygon
            of points.
        byIntersection:
          $ref: '#/components/schemas/ByIntersection'
          description: A query allowing to filter documents by intersecting polygons
        byWithinPolygon:
          $ref: '#/components/schemas/ByWithinPolygon'
          description: A query allowing to filter documents by intersecting polygons
        field:
          description: geo-point field in the index on which filtering will be performed.
            Use GET schema API to find which fields supports spatial search.
          type: string
      title: SpatialFilter
      type: object
    VersionInfo:
      properties:
        artifactId:
          type: string
        branch:
          type: string
        buildTime:
          type: string
        commitId:
          type: string
        commitMessage:
          type: string
        connectedOuterServices:
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
          type: array
        groupId:
          type: string
        version:
          type: string
      title: VersionInfo
      type: object
  securitySchemes:
    Authorization:
      in: header
      name: Authorization
      type: apiKey
info:
  contact: {}
  description: Api Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  termsOfService: urn:tos
  title: Api Documentation
  version: '1.0'
openapi: 3.0.3
paths:
  /api/search/v2/ccs/query:
    post:
      deprecated: true
      description: The API supports cross cluster searches when given the list of
        partitions.
      operationId: CCS Query
      parameters:
      - description: Account ID is the active DELFI account (SLB account or customer's
          account) which the users choose to use with the Search API.
        in: header
        name: account-id
        required: true
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      - description: Token (Google ID or SAuth) representing the user whose request
          is sent on behalf of.
        in: header
        name: on-behalf-of
        required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CcsQueryRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CcsQueryResponse'
          description: Success
        '201':
          description: Created
        '400':
          description: Invalid parameters were given on request
        '401':
          description: Unauthorized
        '403':
          description: User not authorized to perform the action
        '404':
          description: Not Found
        '502':
          description: Search service scale-up is taking longer than expected. Wait
            10 seconds and retry.
      security:
      - Authorization:
        - global
      summary: Queries using the input request criteria.
      tags:
      - search-api
  /api/search/v2/health/liveness_check:
    get:
      operationId: livenessCheckUsingGET
      parameters:
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Authorization:
        - global
      summary: livenessCheck
      tags:
      - health-check-api
  /api/search/v2/health/readiness_check:
    get:
      operationId: readinessCheckUsingGET
      parameters:
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Authorization:
        - global
      summary: readinessCheck
      tags:
      - health-check-api
  /api/search/v2/info:
    get:
      operationId: infoUsingGET
      parameters:
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
      - Authorization:
        - global
      summary: info
      tags:
      - info-api
  /api/search/v2/query:
    post:
      description: 'The API supports full text search on string fields, range queries
        on date, numeric or string fields, along with geo-spatial search. Required
        roles: ''users.datalake.viewers'' or ''users.datalake.editors'' or ''users.datalake.admins''
        or ''users.datalake.ops''. In addition, users must be a member of data groups
        to access the data.'
      operationId: Query
      parameters:
      - description: Account ID is the active DELFI account (SLB account or customer's
          account) which the users choose to use with the Search API.
        in: header
        name: account-id
        required: true
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      - description: Token (Google ID or SAuth) representing the user whose request
          is sent on behalf of.
        in: header
        name: on-behalf-of
        required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Success
        '201':
          description: Created
        '400':
          description: Invalid parameters were given on request
        '401':
          description: Unauthorized
        '403':
          description: User not authorized to perform the action
        '404':
          description: Not Found
        '502':
          description: Search service scale-up is taking longer than expected. Wait
            10 seconds and retry.
      security:
      - Authorization:
        - global
      summary: Queries using the input request criteria.
      tags:
      - search-api
  /api/search/v2/query_with_cursor:
    post:
      description: 'The API supports full text search on string fields, range queries
        on date, numeric or string fields, along with geo-spatial search. Required
        roles: ''users.datalake.viewers'' or ''users.datalake.editors'' or ''users.datalake.admins''
        or ''users.datalake.ops''. In addition, users must be a member of data groups
        to access the data. It can be used to retrieve large numbers of results (or
        even all results) from a single search request, in much the same way as you
        would use a cursor on a traditional database.'
      operationId: Query with cursor
      parameters:
      - description: Account ID is the active DELFI account (SLB account or customer's
          account) which the users choose to use with the Search API.
        in: header
        name: account-id
        required: true
      - description: tenant. This should be same value as first field in 'kind' field
        in: header
        name: data-partition-id
        required: true
      - description: Token (Google ID or SAuth) representing the user whose request
          is sent on behalf of.
        in: header
        name: on-behalf-of
        required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CursorQueryRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CursorQueryResponse'
          description: Success
        '201':
          description: Created
        '400':
          description: Invalid parameters were given on request
        '401':
          description: Unauthorized
        '403':
          description: User not authorized to perform the action
        '404':
          description: Not Found
        '502':
          description: Search service scale-up is taking longer than expected. Wait
            10 seconds and retry.
      security:
      - Authorization:
        - global
      summary: Queries using the input request criteria.
      tags:
      - search-api
servers:
- description: Inferred Url
  url: https://uptesting0.oep.ppe.azure-int.net
tags:
- description: Health Check Api
  name: health-check-api
- description: Info Api
  name: info-api
- description: Search Api
  name: search-api
